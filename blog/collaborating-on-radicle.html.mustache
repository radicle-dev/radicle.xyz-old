<!doctype html>
<html>
<head>
  <title key="title">Collaborating on Radicle</title>
  {{> headMeta }}
  <meta property="og:title" content="Radicle Blog - Collaborating on Radicle" />
  <meta property="og:image" content="https://radicle.xyz/img/social-share.jpg" />
  <meta property="twitter:image" content="https://radicle.xyz/img/social-share.jpg" />
  <meta property="og:description" content="This is a post on Radicle, a peer-to-peer stack for code collaboration. When coming to Radicle from a centralized code collaboration network like GitHub or Gitlab, users might be puzzled by Radicle's unique social model at first. In contrast to centralized code collaboration platforms, on Radicle… " />
  <meta property="description" content="This is a post on Radicle, a peer-to-peer stack for code collaboration. When coming to Radicle from a centralized code collaboration network like GitHub or Gitlab, users might be puzzled by Radicle's unique social model at first. In contrast to centralized code collaboration platforms, on Radicle… " />
</head>
<body id="post">
  <div class="overflow-killer">
   {{> header }}
    <div class="content">
      <section id="headline" class="collaborating">
        <h1 class="headline druk">
          Collaborating on Radicle
        </h1>
        <p class="subtitle">
          Understanding the Radicle social model
        </p>
      </section>
      <div id="post-container">
        <p class="meta">by <a href="https://twitter.com/lftherios" target="_blank">@lftherios</a> • <span>December 20th, 2020</span></p>
        <p>
          When coming to Radicle from a centralized code collaboration network
          like GitHub or Gitlab, users might be puzzled by Radicle’s unique
          social model at first. In contrast to centralized code collaboration
          platforms, on Radicle:
        </p>
        <ol>
          <li>Peers are in control of their social interactions</li>
          <li>Each peer effortlessly self hosts their own content and the
          content of the peers they follow that they are interested in</li>
          <li>Peers have subjective views over the projects they follow</li>
        </ol>
        <p>
          This post attempts to contextualize the Radicle social model, the
          trade-offs it makes, and how it differs from the models of well-known
          centralized platforms.
        </p>
        <h2>The Web2 Social Model</h2>
        <p>
          In most Web2 social networks:
        </p>
        <ul>
          <li>Your content is global by default</li>
          <li>Your service provider is in control of your content (what you
          post), your identity, and your access</li>
          <li>Your service provider is in control of your social interactions.
          Practically, this means your service provider can determine what is
          spam and who you are allowed to interact with.</li>
        </ul>
        <p>
          In exchange you get:
        </p>
        <ul>
          <li>A “privately owned public space”, where you can discover &
          interact with any public piece of content or user on the network, as
          long as it is allowed by your service provider.</li>
          <li>Convenience, as spam filtering & content moderation is mostly done
          for you (email and gmail are the best example of spam filtering, while
          the global feeds of Facebook and Twitter are examples of content
          moderation at scale)</li>
        </ul>
        <p>
          When it comes to code collaboration, the former has proven to be
          significant to the growth of free and open-source sofware, as any user
          can a) consume any (public) project within centralized code
          collaboration networks and b) interact with any project within the
          network, by submitting patches or issues, creating branches or
          participating in the discussion (commenting).
        </p>
        <h2>The Radicle Social Model </h2>
        <p>
          In contrast to the common Web2 model of collaboration described above, Radicle prioritizes different concerns:
        </p>
        <ul>
          <li>People being in control of their identity</li>
          <li>People being in control of their content</li>
          <li>People being in control of their social interactions</li>
        </ul>
        <p>
          <em>You can read more about why we consider these concerns a priority
          <a href = "https://radicle.xyz/blog/towards-decentralized-code-collaboration.html">here</a>.</em>
        </p>
        <p>
          Designing our protocol, Radicle Link, to satisfy these constraints led
          us to a new model for collaboration that might be familiar to the free
          and open-source hackers of the 90s and early 2000s — one that is
          radically different from that presented by well-known Web2 platforms.
        </p>
        <h2>Protocol design</h2>
        <p>
          Radicle Link is a peer-to-peer gossip protocol with a generic
          distributed version control backend. It aims to be general enough to
          be used on top of systems such as pijul or mercurial, though its
          initial implementation is focused on supporting Git.
        </p>
        <p>
          The protocol disseminates Git repositories via gossip-based
          replication, enabling the hosting and sharing of repositories without
          reliance on central servers.
        </p>
        <p>
          In practice, Radicle Link distinguishes between two types of
          identities: personal and project. The first describes an actor in the
          system, while the second describes a (software) project on which one
          or more actors collaborate.
        </p>
        <p>
          In Radicle:
        </p>
        <ul>
          <li>Peers follow other peers.</li>
          <li>Peers track projects they are interested in.</li>
          <li>Peers gossip about projects. This means tracking and replicating
          objects from the peers they follow, about the projects they are
          interested in.</li>
        </ul>
        <p>
          f you have already interacted with other decentralized social
          networks, this model might remind you of <a href =
          "https://scuttlebutt.nz/">Secure Scuttlebutt</a>. In fact, Radicle is
          inspired by SSB's design but diverges from it in a few ways, mainly a)
          Radicle is operating on
          <a href =
          "https://en.wikipedia.org/wiki/Directed_acyclic_graph">DAGs</a>, not a
          single linear feed and b) the Radicle “identity” is not just the
          public key associated with that feed, but a delegation scheme that
          allows you to talk about N projects and M persons. To learn more about
          how Radicle Link works, see <a
          href="https://docs.radicle.xyz/docs/understanding-radicle/how-it-works">our
          docs</a>.
        </p>
        <h2>Implications for end-user experience</h2>
        <p>
          The way Radicle Link disseminates data has certain implications for the end-user experience:
        </p>
        <dl>
          <dt>Your social graph determines what type of content you see,
          interact with, and replicate</dt>
          <dd>
            Assuming you have discovered a project of interest within the
            Radicle network, then the first thing you have to do in order to
            interact with it is to track it. Tracking a project signals
            interest, and by design implies tracking the project’s maintainers,
            therefore replicating the data within their social graphs.
          </dd>
          <dd>
            In the context of a project, maintainers of a repository may choose to
            track the views of other owners (this is called a remote in Git
            terminology: a named reference to a remote repository). If the remote
            repository is found to track other remotes, the tracking repository
            shall also transitively track those, up to a configurable N degrees
            out (currently in the works).
          </dd>
          <dt>Spam and content moderation is naturally handled by the peer’s social graph</dt>
          <dd>
            While this might appear confusing at first, self-moderation is a far
            more natural model for moderation as it actually mimics real-life
            communication. By design, it addresses the issues of Web2 content
            moderation, which are currently handled by biased algorithms or
            dependent on central hosting.
          </dd>
          <dd>
            On Radicle, a spammer’s patches or issues will never be tracked by
            the actual maintainers and as a result, they won’t be seen by the
            rest of the network (unless explicitly tracked). Similarly, if you
            are not interested in a peer’s views or contributions to a
            project, you can simply un-follow them, which stops replication,
            and ensures you (or your connected peers!) don’t have to view and
            interact with their data.
          </dd>
          <dt>Within the same project, two peers might have diverging views</dt>
          <dd>
            The above design also means that even within the same project, peers
            have subjective (and often diverging) views.
          </dd>
          <dd>
            At a minimum, your view of a project becomes the sum of the views
            of the people you follow, plus the views of the maintainers of the
            project. In addition, you can expand your perspective by
            configuring your replication settings to also transitively track
            other remotes N degrees out from the peers you follow (i.e. peers
            of your peers / remotes of your remotes) (currently work in
            progress).
          </dd>
          <dd>
            This design also addresses the significant problem with
            decentralized systems relying exclusively on distributed ledger
            technology, sometimes referred to as “blockchain poisoning”. This
            is when someone deliberately adds illegal content to an
            append-only source in hopes to make the sole act of replicating
            the project legally problematic, as correctly pointed out by
            Konstantin Ryabitsev of the Linux foundation with regards to a
            <a href="http://alpha.radicle.xyz/">previous version</a> of
            Radicle that was relying on <a href="https://ipfs.io/">IPFS</a>.
          </dd>
        </dl>
        <h2>But what about the “public square”?</h2>
        <p>
          While the above design addresses critical problems around user
          sovereignty, censorship resistance, and spam & content moderation, new
          challenges emerge.
        </p>
        <p>
          Specifically, the main challenges that arise from the above design are
          1) discoverability, and 2) the ability to contribute to any project
          within the network. Both have proven to be very important to the
          growth of free and open-source software, so it’s important to ensure
          they are taken into account.
        </p>
        <h3>Discovery</h3>
        <p>
          While Radicle is not designed to be global by default for the
          reasons explained above, we complemented Radicle Link’s design with
          opt-in solutions that can enhance any peer’s ability to discover new
          projects and other users within the network. In order to do so,
          we’ve introduced two additional concepts:
        </p>
        <dl>
          <dt>Seed nodes</dt>
            <dd>
              Seed nodes are always-on nodes that ensure data-availability in
              the network by serving content over the gossip protocol. Anyone
              can run a seed node and have it serve the content they choose.
              Seed nodes are just regular nodes without a user identity.
            </dd>
            <dd>
              If they have a stable network address, they serve as entry nodes
              to the network. Many models of running a seed are imaginable:
              shared “home servers” (a la fediverse), commercial services,
              pinning nodes and more.
            </dd>
          <dt>An Ethereum-based registry</dt>
            <dd>
              To complement the replication layer we designed an opt-in registry
              which holds canonical project metadata. This allows projects to
              anchor important information—such as project state and repository
              head—with the guarantee of global availability and immutability.
            </dd>
            <dd>
              As a peer, you will be able to create an account within the
              Radicle Registry, attest your Radicle Link identity and anchor
              project information there. (Our Ethereum integration will be
              covered in detail in an upcoming post, as it enables many more
              things beyond project anchoring)
            </dd>
        </dl>
        <h3>Contributing to projects within the network</h3>
        <p>
          As explained above, when you are contributing to another project
          within Radicle, your contributions (patches, issues, branches etc.)
          might not be visible to the project’s maintainers or other
          contributors, if no-one in their network is following you.
        </p>
        <p>
          While this model for collaboration is desirable for some — controlling
          the visibility & interactivity of content is actually a growing trend
          even within Web2 platforms (see recent changes on <a
          href="https://blog.twitter.com/en_us/topics/product/2020/testing-new-conversation-settings.html">twitter</a>
          and <a
          href="https://www.wired.com/story/instagram-close-friends/">instagram</a>)
          — we realize that it might be a limitation for others.
        </p>
        <p>
          For maintainers of projects who are interested in allowing
          contributions from peers outside their social graph, all they have to
          do is to follow seed nodes that promote policies conducive to their
          preferences. While it’s unclear what kind of seed node policies will
          emerge over time, combining seed node functionality with the Ethereum
          radicle registry (that has the benefit of sybil resistance) has the
          potential to serve multiple models and needs for collaboration, all
          within the same network.
        </p>
        <p>
          Finally, it’s important to note that you will be able to see if a
          project you’re interested in contributing to accepts contributions
          from only the maintainers’ social graph or from other peers within the
          network. This empowers maintainers to adjust the preference of their
          projects accordingly to guide & support their contributors.
        </p>
      </div>
    </div>
  </div>
</body>
</html>
