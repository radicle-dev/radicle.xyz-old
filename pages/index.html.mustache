<!doctype html>
<html>
{{> head }}
<body id="index">
  {{> header }}
  <div class="content">
    <section id="subtitle">
      <div class="container">
        <h1>Secure peer-to-peer code collaboration without intermediaries.</h1>
      </div>
    </section>
    <section id="value-prop">
      <div class="container">
        <div>
          <h2>Peer-to-peer</h2>
          <p>
            No hassle setting up your own hosting, and no need to trust
            companies with your data. Radicle builds on <code>git</code>
            and extends it with peer-to-peer replication and discovery.
          </p>
        </div>
        <div>
          <h2>Secure</h2>
          <p>
            Your issues, comments and reviews are cryptographically signed
            and live on your machine. Everything is always available&mdash;even
            offline.
          </p>
        </div>
        <div>
          <h2>Trustless</h2>
          <p>
            Collectively manage your project assets&mdash;like access control,
            funds, and project ownership&mdash;with multisignatures and smart
            contracts.
          </p>
        </div>
        <div>
          <h2>Sustainable</h2>
          <p>
            Support the projects you love and depend on, and receive funding
            <em>on your own terms</em>.
          </p>
        </div>
      </div>
    </section>
    <section id="how-it-works">
      <div class="container">
        <div class="left-box">
          <div>
            <h2>A <strike>new</strike> old collaboration model</h2>
            <p class="hidden">Learn more about <a href="/towards-decentralized-code-collaboration.html">the model</a></p>
          </div>
          <section id="flowers">
            <pre><code>                _(_)_     </code></pre>
            <pre><code>    @@@@       (_)@(_)    </code></pre>
            <pre><code>   @@()@@ wWWWw  (_)\     </code></pre>
            <pre><code>    @@@@  (___)     \|/   </code></pre>
            <pre><code>     /      Y       \|    </code></pre>
            <pre><code>  \ |     \ |/       | /  </code></pre>
            <pre><code>  \\|//   \\|///  \\\|//  </code></pre>
            <pre><code>^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
          </section>
        </div>
        <p>
          Radicle was built to provide a convenient collaboration workflow
          <em>without intermedaries or central servers</em>.  Issues, patches and
          code review items can be shared seamlessly between peers and interacted
          with on the user's machine, just like one interacts with a
          <code>git</code> repository.
          <br />
          <br />
          Designed around peer-to-peer networking, it offers a new design space for
          <a href="http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/">bazaar-style</a>
          development. Login systems are replaced by public key cryptography,
          hosted issue trackers are replaced by local peer replication, and the
          idea of a single canonical upstream is replaced by a
          <em>peer-to-peer</em> model familiar to the open source hackers of the
          90s and early 2000s&mdash;updated with a new protocol for open &amp; trusted peer
          collaboration.
        </p>
        <div class="left-box">
          <h2>How it works</h2>
          <div id="dev-links">
            <p>
              Read the protocol <a href="https://github.com/radicle-dev/radicle-link/blob/master/spec/out/radicle-link.pdf">specification</a>
            </p>
            <p>
              Browse the protocol <a href="https://github.com/radicle-dev/radicle-link">source code</a>
            </p>
          </div>
        </div>
        <p>
          We adopt the <a href="https://scuttlebutt.nz/">SSB</a> <q>social
           overlay</q> paradigm to establish a peer-to-peer replication layer on
          top of distributed version control systems. We model this largely based
          on an (unmodified) <code>git</code> backend, but strive for the protocol
          to be general enough to allow implementations on top of different
          paradigms, e.g <a href="https://pijul.org">pijul</a>.
          <br/>
          <br/>
          To complement the replication layer we introduce a totally-ordered
          consensus-backed registry which holds canonical project metadata.
          This allows projects to anchor important information&mdash;such as
          project state and repository head&mdash;with the guarantee of global
          availability and immutability.
        </p>
      </div>
    </section>
    <section id="clouds">
      <pre><code>                _                                                _                                                     _                                                _                                                    _                                                _                                                </code></pre>
      <pre><code>              (`  ).                   _                       (`  ).                   _                            (`  ).                   _                       (`  ).                   _                           (`  ).                   _                       (`  ).                   _                         </code></pre>
      <pre><code>             (     ).              .:(`  )`.                  (     ).              .:(`  )`.                       (     ).              .:(`  )`.                  (     ).              .:(`  )`.                      (     ).              .:(`  )`.                  (     ).              .:(`  )`.                     </code></pre>
      <pre><code>)           _(       '`.          :(   .    )                _(       '`.          :(   .    )                     _(       '`.          :(   .    )                _(       '`.          :(   .    )                    _(       '`.          :(   .    )                _(       '`.          :(   .    )                    </code></pre>
      <pre><code>        .=(`(      .   )     .--  `.  (    ) )           .=(`(      .   )     .--  `.  (    ) )                .=(`(      .   )     .--  `.  (    ) )           .=(`(      .   )     .--  `.  (    ) )               .=(`(      .   )     .--  `.  (    ) )           .=(`(      .   )     .--  `.  (    ) )                   </code></pre>
      <pre><code>       ((    (..__.:'-'   .+(   )   ` _`  ) )           ((    (..__.:'-'   .+(   )   ` _`  ) )                ((    (..__.:'-'   .+(   )   ` _`  ) )           ((    (..__.:'-'   .+(   )   ` _`  ) )               ((    (..__.:'-'   .+(   )   ` _`  ) )           ((    (..__.:'-'   .+(   )   ` _`  ) )                    </code></pre>
      <pre><code>`.     `(       ) )       (   .  )     (   )  ._        `(       ) )       (   .  )     (   )  ._             `(       ) )       (   .  )     (   )  ._        `(       ) )       (   .  )     (   )  ._            `(       ) )       (   .  )     (   )  ._        `(       ) )       (   .  )     (   )  ._                 </code></pre>
      <pre><code>  )      ` __.:'   )     (   (   ))     `-'.-(`  )        ` __.:'   )     (   (   ))     `-'.-(`  )             ` __.:'   )     (   (   ))     `-'.-(`  )        ` __.:'   )     (   (   ))     `-'.-(`  )            ` __.:'   )     (   (   ))     `-'.-(`  )        ` __.:'   )     (   (   ))     `-'.-(`  )               </code></pre>
      <pre><code>)  )  ( )       --'       `- __.'         :(      ))   ( )       --'       `- __.'         :(      ))        ( )       --'       `- __.'         :(      ))   ( )       --'       `- __.'         :(      ))       ( )       --'       `- __.'         :(      ))   ( )       --'       `- __.'         :(      ))             </code></pre>
      <pre><code>.-'  (_.'          .')                    `(    )  )) (_.'          .')                    `(    )  ))      (_.'          .')                    `(    )  )) (_.'          .')                    `(    )  ))     (_.'          .')                    `(    )  )) (_.'          .')                    `(    )  ))            </code></pre>
      <pre><code>                  (_  )                     ` __.:'                (_  )                     ` __.:'                     (_  )                     ` __.:'                (_  )                     ` __.:'                    (_  )                     ` __.:'                (_  )                     ` __.:'              </code></pre>
      <pre><code>                                                                                                                                                                                                                                                                                                                               </code></pre>
    </section>
  </div>
  {{> footer }}
</body>
</html>
